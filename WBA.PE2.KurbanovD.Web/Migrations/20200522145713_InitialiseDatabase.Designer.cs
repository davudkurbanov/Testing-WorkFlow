// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WBA.PE2.KurbanovD.Web.Data;

namespace WBA.PE2.KurbanovD.Web.Migrations
{
    [DbContext(typeof(CardGameContext))]
    [Migration("20200522145713_InitialiseDatabase")]
    partial class InitialiseDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.CardUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Armor");

                    b.Property<double>("Damage");

                    b.Property<int>("DamageType");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("Health");

                    b.Property<double>("HealthRegen");

                    b.Property<string>("Img");

                    b.Property<double>("Mana");

                    b.Property<double>("Manaregen");

                    b.Property<string>("Name");

                    b.Property<int>("Race");

                    b.HasKey("Id");

                    b.ToTable("CardUnits");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CardUnit");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("EffectType");

                    b.HasKey("Id");

                    b.ToTable("Effects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Effect");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.HeroItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Img");

                    b.Property<string>("Name");

                    b.Property<Guid?>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("HeroItems");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Intermediates.CardUnitSkills", b =>
                {
                    b.Property<Guid>("CardUnitId");

                    b.Property<Guid>("SkillId");

                    b.HasKey("CardUnitId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillSets");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Intermediates.EffectTargets", b =>
                {
                    b.Property<Guid>("EffectId");

                    b.Property<Guid>("TargetId");

                    b.HasKey("EffectId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("EffectTargets");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Intermediates.SkillEffects", b =>
                {
                    b.Property<Guid>("SkillId");

                    b.Property<Guid>("EffectId");

                    b.HasKey("SkillId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("SkillEffects");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Img");

                    b.Property<string>("Name");

                    b.Property<int>("Skillsort");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Skill");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Target", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("HeroTargetType");

                    b.Property<int>("TargetType");

                    b.HasKey("Id");

                    b.ToTable("Targets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Target");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Units.Hero", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.CardUnit");

                    b.Property<int>("ActionPoints");

                    b.Property<int>("HeroClass");

                    b.ToTable("Hero");

                    b.HasDiscriminator().HasValue("Hero");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Units.SummonUnit", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.CardUnit");


                    b.ToTable("SummonUnit");

                    b.HasDiscriminator().HasValue("SummonUnit");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Amplify", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<double>("Amount");

                    b.Property<int>("EffectState");

                    b.Property<int>("Type");

                    b.ToTable("Amplify");

                    b.HasDiscriminator().HasValue("Amplify");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.CriticalHit", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<int>("DamageType");

                    b.Property<double>("Multiplier");

                    b.Property<double>("ProcChance");

                    b.ToTable("CriticalHit");

                    b.HasDiscriminator().HasValue("CriticalHit");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.DealDamage", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<double>("Amount")
                        .HasColumnName("DealDamage_Amount");

                    b.Property<int>("DamageType")
                        .HasColumnName("DealDamage_DamageType");

                    b.ToTable("DealDamage");

                    b.HasDiscriminator().HasValue("DealDamage");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Heal", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<double>("Amount")
                        .HasColumnName("Heal_Amount");

                    b.ToTable("Heal");

                    b.HasDiscriminator().HasValue("Heal");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Lifesteal", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<double>("Percentage");

                    b.ToTable("Lifesteal");

                    b.HasDiscriminator().HasValue("Lifesteal");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Reduce", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<double>("Amount")
                        .HasColumnName("Reduce_Amount");

                    b.Property<int>("EffectState")
                        .HasColumnName("Reduce_EffectState");

                    b.Property<int>("Type")
                        .HasColumnName("Reduce_Type");

                    b.ToTable("Reduce");

                    b.HasDiscriminator().HasValue("Reduce");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Silence", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<int>("EffectState")
                        .HasColumnName("Silence_EffectState");

                    b.Property<double>("SilenceDuration");

                    b.ToTable("Silence");

                    b.HasDiscriminator().HasValue("Silence");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Stun", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<double>("Duration");

                    b.Property<int>("EffectState")
                        .HasColumnName("Stun_EffectState");

                    b.ToTable("Stun");

                    b.HasDiscriminator().HasValue("Stun");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Summon", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Effect");

                    b.Property<int>("Amount")
                        .HasColumnName("Summon_Amount");

                    b.Property<Guid?>("SummonUnitId");

                    b.HasIndex("SummonUnitId");

                    b.ToTable("Summon");

                    b.HasDiscriminator().HasValue("Summon");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Skills.ActiveSkill", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Skill");

                    b.Property<int>("Manacost");

                    b.ToTable("ActiveSkill");

                    b.HasDiscriminator().HasValue("ActiveSkill");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Skills.PassiveSkill", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Skill");


                    b.ToTable("PassiveSkill");

                    b.HasDiscriminator().HasValue("PassiveSkill");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Targets.MultipleTarget", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Target");

                    b.Property<int>("AmountOfTargets");

                    b.Property<int>("AreaOfEffect");

                    b.ToTable("MultipleTarget");

                    b.HasDiscriminator().HasValue("MultipleTarget");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Targets.SingleTarget", b =>
                {
                    b.HasBaseType("WBA.PE2.KurbanovD.Domain.Base.Target");


                    b.ToTable("SingleTarget");

                    b.HasDiscriminator().HasValue("SingleTarget");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.HeroItem", b =>
                {
                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Intermediates.CardUnitSkills", b =>
                {
                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.CardUnit", "CardUnit")
                        .WithMany("SkillSet")
                        .HasForeignKey("CardUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.Skill", "Skill")
                        .WithMany("CardUnits")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Intermediates.EffectTargets", b =>
                {
                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.Effect", "Effect")
                        .WithMany("Targets")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.Target", "Target")
                        .WithMany("Effects")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Intermediates.SkillEffects", b =>
                {
                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.Effect", "Effect")
                        .WithMany("Skills")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.Skill", "Skill")
                        .WithMany("Effects")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WBA.PE2.KurbanovD.Domain.Base.Effects.Summon", b =>
                {
                    b.HasOne("WBA.PE2.KurbanovD.Domain.Base.Units.SummonUnit", "SummonUnit")
                        .WithMany()
                        .HasForeignKey("SummonUnitId");
                });
#pragma warning restore 612, 618
        }
    }
}
